#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/sem.h>
#include <fcntl.h>
#include <sys/select.h>

#define SHM_KEY 1234
#define SEM_KEY 5678

#define MAX_PEDIDOS 10
#define MAX_TEXTO 64
#define MAX_CLIENTES 4

// Estructura del pedido
typedef struct {
    int cliente_id;
    char pedido[MAX_TEXTO];
} Pedido;

// Cola circular
typedef struct {
    Pedido pedidos[MAX_PEDIDOS];
    int frente;
    int final;
    int count;
} ColaPedidos;

// Índices de semáforo
enum { MUTEX = 0, ESPACIO_DISPONIBLE = 1, PEDIDO_DISPONIBLE = 2 };

// Semáforo - Espera
void sem_wait(int semid, int semnum) {
    struct sembuf op = { semnum, -1, 0 };
    semop(semid, &op, 1);
}

// Semáforo - Señal
void sem_signal(int semid, int semnum) {
    struct sembuf op = { semnum, +1, 0 };
    semop(semid, &op, 1);
}

// Función del cliente
void ejecutar_cliente(int cliente_id, const char *pedido_str) {
    int shmid = shmget(SHM_KEY, sizeof(ColaPedidos), 0666);
    if (shmid == -1) {
        perror("shmget");
        exit(1);
    }

    ColaPedidos *cola = (ColaPedidos *)shmat(shmid, NULL, 0);
    int semid = semget(SEM_KEY, 3, 0666);

    sem_wait(semid, ESPACIO_DISPONIBLE);
    sem_wait(semid, MUTEX);

    Pedido p;
    p.cliente_id = cliente_id;
    strncpy(p.pedido, pedido_str, MAX_TEXTO);

    cola->pedidos[cola->final] = p;
    cola->final = (cola->final + 1) % MAX_PEDIDOS;
    cola->count++;

    printf("Cliente %d - Pedido enviado: %s\n", cliente_id, pedido_str);

    sem_signal(semid, MUTEX);
    sem_signal(semid, PEDIDO_DISPONIBLE);

    shmdt(cola);
}

// Función de la cocina
void ejecutar_cocina() {
    int shmid = shmget(SHM_KEY, sizeof(ColaPedidos), IPC_CREAT | 0666);
    if (shmid == -1) {
        perror("shmget");
        exit(1);
    }

    ColaPedidos *cola = (ColaPedidos *)shmat(shmid, NULL, 0);
    int semid = semget(SEM_KEY, 3, IPC_CREAT | 0666);
    if (semid == -1) {
        perror("semget");
        exit(1);
    }

    // Inicializar solo si es nuevo
    semctl(semid, MUTEX, SETVAL, 1);
    semctl(semid, ESPACIO_DISPONIBLE, SETVAL, MAX_PEDIDOS);
    semctl(semid, PEDIDO_DISPONIBLE, SETVAL, 0);

    cola->frente = 0;
    cola->final = 0;
    cola->count = 0;

    printf("Cocina iniciada. Escribe 'close' para cerrar.\n");

    fd_set fds;
    struct timeval tv;
    char input[16];

    while (1) {
        // Detectar si escribieron "close"
        FD_ZERO(&fds);
        FD_SET(STDIN_FILENO, &fds);
        tv.tv_sec = 0;
        tv.tv_usec = 0;

        if (select(STDIN_FILENO + 1, &fds, NULL, NULL, &tv)) {
            fgets(input, sizeof(input), stdin);
            input[strcspn(input, "\n")] = 0;
            if (strcmp(input, "close") == 0) {
                printf("Cocina cerrando...\n");
                break;
            }
        }

        // Si hay pedidos, procesarlos
        struct sembuf sops[1] = {{PEDIDO_DISPONIBLE, -1, IPC_NOWAIT}};
        if (semop(semid, sops, 1) == -1) {
            usleep(100000);
            continue;
        }

        sem_wait(semid, MUTEX);

        Pedido p = cola->pedidos[cola->frente];
        cola->frente = (cola->frente + 1) % MAX_PEDIDOS;
        cola->count--;

        sem_signal(semid, MUTEX);
        sem_signal(semid, ESPACIO_DISPONIBLE);

        printf("Cocina - Atendiendo pedido del Cliente %d: %s\n", p.cliente_id, p.pedido);
        sleep(2);
    }

    shmdt(cola);
    shmctl(shmid, IPC_RMID, NULL);
    semctl(semid, 0, IPC_RMID);
}

// Función principal
int main() {
    int opcion;
    printf("Selecciona una opción:\n");
    printf("1. Iniciar cocina\n");
    printf("2. Enviar pedido como cliente\n");
    printf("Opción: ");
    scanf("%d", &opcion);
    getchar(); // limpiar \n

    if (opcion == 1) {
        ejecutar_cocina();
    } else if (opcion == 2) {
        int cliente_id;
        char pedido[MAX_TEXTO];

        printf("ID del cliente (1-4): ");
        scanf("%d", &cliente_id);
        getchar();

        if (cliente_id < 1 || cliente_id > MAX_CLIENTES) {
            printf("ID inválido.\n");
            exit(1);
        }

        printf("Pedido: ");
        fgets(pedido, MAX_TEXTO, stdin);
        pedido[strcspn(pedido, "\n")] = 0;

        ejecutar_cliente(cliente_id, pedido);
    } else {
        printf("Opción no válida.\n");
    }

    return 0;
}
